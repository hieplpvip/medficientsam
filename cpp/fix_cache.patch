diff --git a/src/inference/src/compilation_context.cpp b/src/inference/src/compilation_context.cpp
index 30720353a0..799754c44e 100644
--- a/src/inference/src/compilation_context.cpp
+++ b/src/inference/src/compilation_context.cpp
@@ -95,15 +95,7 @@ std::string ModelCache::compute_hash(const std::shared_ptr<const ov::Model>& mod
 std::string ModelCache::compute_hash(const std::string& modelName, const ov::AnyMap& compileOptions) {
     OV_ITT_SCOPE(FIRST_INFERENCE, ov::itt::domains::ReadTime, "ModelCache::compute_hash - ModelName");
     uint64_t seed = 0;
-    try {
-        seed = hash_combine(seed, ov::util::get_absolute_file_path(modelName));
-    } catch (...) {
-        // can't get absolute path, use modelName for hash calculation
-        seed = hash_combine(seed, modelName);
-    }
-    for (const auto& kvp : compileOptions) {
-        seed = hash_combine(seed, kvp.first + kvp.second.as<std::string>());
-    }
+    seed = hash_combine(seed, modelName);
     return std::to_string(seed);
 }
 
diff --git a/src/inference/src/dev/core_impl.cpp b/src/inference/src/dev/core_impl.cpp
index 702a6d3096..8b62aab5ac 100644
--- a/src/inference/src/dev/core_impl.cpp
+++ b/src/inference/src/dev/core_impl.cpp
@@ -1391,50 +1391,15 @@ ov::SoPtr<ov::ICompiledModel> ov::CoreImpl::load_model_from_cache(
     struct HeaderException {};
 
     OPENVINO_ASSERT(cacheContent.cacheManager != nullptr);
-    try {
-        cacheContent.cacheManager->read_cache_entry(cacheContent.blobId, [&](std::istream& networkStream) {
-            OV_ITT_SCOPE(FIRST_INFERENCE,
-                         ov::itt::domains::LoadTime,
-                         "Core::load_model_from_cache::ReadStreamAndImport");
-            try {
-                ov::CompiledBlobHeader header;
-                networkStream >> header;
-                if (header.getFileInfo() != ov::ModelCache::calculate_file_info(cacheContent.modelPath)) {
-                    // Original file is changed, don't use cache
-                    OPENVINO_THROW("Original model file is changed");
-                }
-                if (util::contains(plugin.get_property(ov::internal::supported_properties),
-                                   ov::internal::compiled_model_runtime_properties_supported.name())) {
-                    ov::AnyMap compiled_model_runtime_properties = {
-                        {ov::internal::compiled_model_runtime_properties.name(), std::string(header.getRuntimeInfo())}};
-                    auto res = plugin.get_property(ov::internal::compiled_model_runtime_properties_supported.name(),
-                                                   compiled_model_runtime_properties);
-                    if (!res.as<bool>()) {
-                        OPENVINO_THROW("Original model runtime properties have been changed, not supported anymore!");
-                    }
-                } else {
-                    if (header.getIeVersion() != ov::get_openvino_version().buildNumber) {
-                        // Build number mismatch, don't use this cache
-                        OPENVINO_THROW("Version does not match");
-                    }
-                }
-            } catch (...) {
-                throw HeaderException();
-            }
-
-            ov::AnyMap update_config = config;
-            update_config[ov::loaded_from_cache.name()] = true;
-            compiled_model = context ? plugin.import_model(networkStream, context, update_config)
-                                     : plugin.import_model(networkStream, update_config);
-        });
-    } catch (const HeaderException&) {
-        // For these exceptions just remove old cache and set that import didn't work
-        cacheContent.cacheManager->remove_cache_entry(cacheContent.blobId);
-    } catch (...) {
-        cacheContent.cacheManager->remove_cache_entry(cacheContent.blobId);
-        // TODO: temporary disabled by #54335. In future don't throw only for new 'blob_outdated' exception
-        // throw;
-    }
+    cacheContent.cacheManager->read_cache_entry(cacheContent.blobId, [&](std::istream& networkStream) {
+        ov::CompiledBlobHeader header;
+        networkStream >> header;
+
+        ov::AnyMap update_config = config;
+        update_config[ov::loaded_from_cache.name()] = true;
+        compiled_model = context ? plugin.import_model(networkStream, context, update_config)
+                                 : plugin.import_model(networkStream, update_config);
+    });
 
     // fallback scenario
     if (!compiled_model)
